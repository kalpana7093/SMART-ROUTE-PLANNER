# -*- coding: utf-8 -*-
"""Smart route planner.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A3CMSicGnsp9O9gArMMWuthyZt7hFerH
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
import joblib
# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")

orders = pd.read_csv("/content/orders.csv")

delivery = pd.read_csv("/content/delivery_performance.csv")

routes = pd.read_csv("/content/routes_distance.csv")

fleet = pd.read_csv("/content/vehicle_fleet.csv")

warehouse = pd.read_csv("/content/warehouse_inventory.csv")

cost = pd.read_csv("/content/cost_breakdown.csv")

feedback = pd.read_csv("/content/customer_feedback.csv")

orders.info()

orders.head()

delivery.info()

routes.info()

fleet.info()

cost.info()

warehouse.info()

feedback.info()

def clean_df(df):
    df = df.copy()
    df.columns = [c.strip().lower().replace(" ","_") for c in df.columns]
    df = df.drop_duplicates()
    return df

orders = clean_df(orders)
delivery = clean_df(delivery)
routes = clean_df(routes)
fleet = clean_df(fleet)
warehouse = clean_df(warehouse)
cost = clean_df(cost)
feedback = clean_df(feedback)

def missing_summary(df, name):
    miss = df.isna().sum()
    miss = miss[miss>0]
    if len(miss)>0:
        print(f"\n{name} - Missing Values:")
        print(miss.sort_values(ascending=False))
    else:
        print(f"\n{name} - No missing values")

for name, df in [('Orders',orders),('Delivery',delivery),
                 ('Routes',routes),('Fleet',fleet),
                 ('Warehouse',warehouse),('Cost',cost),
                 ('Feedback',feedback)]:
    missing_summary(df,name)

if "route" in routes.columns:
    # Try splitting by '-' or '–' (dash or en dash)
    routes[['origin','destination']] = routes['route'].str.replace('–','-').str.split('-', n=1, expand=True)
    routes['origin'] = routes['origin'].str.strip()
    routes['destination'] = routes['destination'].str.strip()

print(routes[['route','origin','destination']].head())

merged = (
    orders
    .merge(delivery, on="order_id", how="left", suffixes=("","_del"))
    .merge(routes, on=["origin","destination"], how="left")
)

merged.columns=merged.columns.str.strip().str.lower()

if "delivery_status" in merged.columns:
  merged["delivery_status"] = merged["delivery_status"].astype(str).str.lower()
  merged["late_flag"] = merged["delivery_status"].map({
        "on-time": 0,
        "slightly-delayed": 1,
        "severely-delayed": 1,
        "delayed": 1
  })
else:
   merged["late_flag"] = merged["late_flag"].fillna(0).astype(int)

for c in ["distance_km","toll_charge","traffic_delay","weather_impact","fuel_consumption","order_value"]:
    if c in merged.columns:
        merged[c] = pd.to_numeric(merged[c], errors="coerce")

print(merged.columns)

merged["late_flag"]

# Estimate cost and delay risk
merged["est_route_cost"] = merged["distance_km"]*0.5 + merged["toll_charge"].fillna(0)

merged["delay_risk_score"] = merged["traffic_delay_minutes"].fillna(0)*2 + merged["weather_impact"].fillna(0)

print("\n=== Basic Statistics ===")
print(merged.describe().T)

#Corelation heatmap
num_cols = merged.select_dtypes(include=np.number).columns.tolist()
plt.figure(figsize=(10,6))
sns.heatmap(merged[num_cols].corr(), cmap="YlGnBu", annot=False)
plt.title("Correlation Heatmap")
plt.show()

plt.figure(figsize=(5,4))
merged["late_flag"].value_counts().plot(kind='bar', color=['green','red'])
plt.title("On-Time vs Late Deliveries")
plt.xticks(ticks=[0,1], labels=["On-Time","Late"], rotation=0)
plt.ylabel("Count")
plt.show()

# distance vs delay risk
plt.figure(figsize=(6,4))
sns.scatterplot(data=merged, x="distance_km", y="delay_risk_score", alpha=0.6)
plt.title("Distance vs. Delay Risk")
plt.show()

# route cost distribution
plt.figure(figsize=(6,4))
sns.histplot(merged["est_route_cost"], bins=30, kde=True, color="skyblue")
plt.title("Estimated Route Cost Distribution")
plt.show()

delay_by_city = merged.groupby("destination")["late_flag"].mean().sort_values(ascending=False)
delay_by_city.head(10).plot(kind='bar', color='tomato', figsize=(7,4))
plt.title("Average Late Delivery Rate by Destination")
plt.ylabel("Late Ratio")
plt.show()

df=merged

df

df["toll_charge"]=df["toll_charges_inr"]

df["traffic_delay"]=df["traffic_delay_minutes"]

df["order_value"]=df["order_value_inr"]

candidate_features = [
    "priority", "product_category",
    "distance_km", "traffic_delay",
    "weather_impact", "toll_charge",
    "order_value", "delay_risk_score", "est_route_cost"
]

# Keep only columns that exist in your dataset
features = [f for f in candidate_features if f in df.columns]
print("\nUsing features:", features)

target = "late_flag"
if target not in df.columns:
    raise ValueError("❌ 'late_flag' column not found. Please check clean_master.csv.")

for c in num_cols:
    X[c] = pd.to_numeric(X[c], errors='coerce')

X = df[features].copy()
y = df[target].fillna(0).astype(int)

X = X.fillna(X.median(numeric_only=True))
X = X.fillna("Unknown")

cat_cols = [c for c in X.columns if X[c].dtype == 'object' or X[c].dtype == 'O']
num_cols = [c for c in X.columns if X[c].dtype != 'object']

print("Categorical columns:", cat_cols)
print("Numeric columns:", num_cols)

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.25, random_state=42, stratify=y
)
print("Train size:", X_train.shape, "Test size:", X_test.shape)

preprocess = ColumnTransformer(
    transformers=[
        ("num", SimpleImputer(strategy="median"), num_cols),
        ("cat", Pipeline(steps=[
            ("imputer", SimpleImputer(strategy="most_frequent")),
            ("onehot", OneHotEncoder(handle_unknown="ignore"))
        ]), cat_cols)
    ]
)

# Random Forest Classifier
rf_model = RandomForestClassifier(
    n_estimators=200,
    max_depth=None,
    random_state=42,
    class_weight='balanced',   # handles class imbalance
    n_jobs=-1
)

# Combine into pipeline
model = Pipeline(steps=[
    ("preprocess", preprocess),
    ("clf", rf_model)
])

model.fit(X_train, y_train)
print(" Model trained successfully!")

y_pred = model.predict(X_test)
acc = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {acc:.3f}")
print("\nClassification Report:\n", classification_report(y_test, y_pred))

cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt='d', cmap='YlGnBu')
plt.title("Confusion Matrix (Random Forest)")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

import os
os.makedirs("models", exist_ok=True)
joblib.dump(model, "models/delay_predictor_rf.pkl")
print(" Random Forest model saved to models/delay_predictor_rf.pkl")

# sample test
sample = X_test.iloc[[0]]
pred = model.predict(sample)[0]
print("\nSample prediction:", "Late" if pred==1 else "On-Time")

